on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

name: ecr-ecs-nest pipeline

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build the application
        run: yarn build
      - name: Lint the code
        run: yarn lint
      - name: Format the code
        run: yarn format
      - name: Run tests
        run: yarn test --watch=false --bail
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ci
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.AWS_ROLE_ASSUME }}
          role-session-name: github-session

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.AWS_ECR_REPO_NAME }}
        run: |
          WEBAPP_VERSION=$(node -p -e "require('./package.json').version")
          IMAGE=$ECR_REGISTRY/${{ vars.AWS_ECR_WORKSPACE }}/${GITHUB_REPOSITORY#*/}:$WEBAPP_VERSION
          echo "Image is $IMAGE"
          # Build a docker container and push it to ECR 
          docker build -t $IMAGE .
          echo "Pushing image $IMAGE to ECR..."
          docker push $IMAGE
          # echo "::set-output name=image::$IMAGE"
